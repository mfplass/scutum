;;;#! /usr/bin/env scheme-r5rs
;;; -*-Scheme-*-
;;-
;; Copyright (c) 2016 Michael F. Plass
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions
;; are met:
;; 1. Redistributions of source code must retain the above copyright
;;    notice, this list of conditions and the following disclaimer.
;; 2. Redistributions in binary form must reproduce the above copyright
;;    notice, this list of conditions and the following disclaimer in the
;;    documentation and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;

(define %reader
  ((lambda ()
     (define (%read port) (skip-to-token (%t (peek-char port)) port))
     (define (next port) (read-char port) (%t (peek-char port)))
     (define (bufstr buf) (list->string (reverse buf)))
     (define (skip-to-token ch port)
       (cond
	((eof-object? ch) ch)
	((char-whitespace? ch) (skip-to-token (next port) port))
	((char=? ch #\; ) (skip-comment (next port) port))
	((or (char-numeric? ch) (memq ch *number-start*))
	 (accum-number ch '() port) )
	((or (char-alphabetic? ch) (memq ch *symbol-special-initials*))
	 (symbolize ch '() port) )
	((char=? ch #\( ) (next port) (accum-list (%read port) '() port))
	((char=? ch #\) ) (next port) %closing)
	((char=? ch #\# ) (hash-dispatch (next port) port))
	((char=? ch #\" ) (accum-string (next port) '() port))
	((char=? ch #\' ) (next port) (list 'quote (%legal (%read port))))
	((char=? ch #\` ) (next port) (list 'quasiquote (%legal (%read port))))
	((char=? ch #\, ) (accum-unquote (next port) port))
	(#t (error "illegal token" ch)) ))
     (define (skip-comment ch port)
       (cond
	((eof-object? ch) ch)
	((char=? ch #\newline) (skip-to-token (next port) port))
	(#t (skip-comment (next port) port)) ))
     (define (accum-number ch buf port)
       (cond
	((or (char-numeric? ch) (char-ci-in? ch *number-specials*))
	 (accum-number (next port) (cons ch buf) port) )
	(#t (number-or-peculiar (bufstr buf))) ))
     (define (symbolize ch buf port)
       (accum-symbol (next port) (cons (char-downcase ch) buf) port) )
     (define (accum-symbol ch buf port)
       (cond
	((symbol-char? ch) (symbolize ch buf port))
	(#t (string->symbol (bufstr buf))) ))
     (define (accum-vector item buf port)
       (cond
        ((eof-object? item) (%eof-error))
        ((eq? item %closing) (list->vector (reverse buf)))
        ((eq? item %dot) (error "Illegal vector"))
        (#t (accum-vector (%read port) (cons item buf) port)) ))
     (define (accum-list item buf port)
       (cond
	((eof-object? item) (%eof-error))
	((eq? item %closing) (reverse buf))
	((eq? item %dot) 
	 (if (null? buf) (error "Illegal S-expression"))
	 (finish-dotted (%legal (%read port)) buf port))
	(#t (accum-list (%read port) (cons item buf) port)) ))
     (define (finish-dotted d buf port)
       (cond
	((pair? buf)
	 ((lambda (c)
	    (set! buf (cdr c))
	    (set-cdr! c d)
	    (finish-dotted c buf port)) buf) )
	(#t (demand-closing (%read port)) d) ))
     (define (demand-closing x)
       (or (eq? x %closing) (error "Malformed dotted list")) )
     (define (accum-string ch buf port)
       (cond
	((eof-object? ch) (%eof-error))
	((char=? ch #\" ) (next port) (bufstr buf))
	((char=? ch #\\ ) (accum-string-escaped (next port) buf port))
	(#t (accum-string (next port) (cons ch buf) port)) ))
     (define (accum-string-escaped ch buf port)
       (accum-string (next port) (cons (%legal-qc ch) buf) port) )
     (define (accum-unquote ch port)
       (define uq
	 (cond
	  ((eqv? ch #\@) (next port) 'unquote-splicing)
	  (#t 'unquote) ))
       (list uq (%legal (%read port))) )
     (define (hash-dispatch ch port)
       (cond
	((char-ci=? ch #\t) (next port) #t)
	((char-ci=? ch #\f) (next port) #f)
	((char=? ch #\\ ) (char-const (next port) port))
	((char=? ch #\( ) (next port) (accum-vector (%read port) '() port))
        ((char-ci-in? ch "iebodx") (accum-number ch (list #\#) port))  
	((char=? ch #\! ) (skip-comment ch port)) ; Non-standard
	(#t (error "Bad #" ch)) ))
     (define (char-const ch port)
       (cond
	((char-alphabetic? ch) (named-char-const (next port) (list ch) port))
	(#t (next port) ch) ))
     (define (named-char-const ch buf port)
       (cond
	((char-alphabetic? ch)
	 (named-char-const (next port)
			   (cons (char-downcase ch) (lower-first buf)) port) )
	((null? (cdr buf)) (car buf))
	(#t (lookup-named-char (string->symbol (bufstr buf)))) ))
     (define (lower-first x)
       (cond
	((and (pair? x)
	      (char-upper-case? (car x)) )
	 (cons (char-downcase (car x)) (cdr x)) )
	(#t x) ))
     (define (lookup-named-char name)
       (cdr (or (assq name *named-chars*) (error "Unknown char name" name))) )
     (define *symbol-special-initials* (string->list "!$%&*/:<=>?^_~"))
     (define *symbol-specials*     (string->list "+-.@!$%&*/:<=>?^_~"))
     (define *number-start*        (string->list "+-.@"))
     (define *number-specials*                   "+-.@#/esfdliebodxabcdef")
     (define *named-chars* (quote ( (space   . #\space  )
				    (newline . #\newline)
				    )))
     (define (symbol-char? x)
       (and (char? x)
	    (or (char-alphabetic? x)
		(char-numeric? x)
		(memq x *symbol-specials*) )))
     (define (number-or-peculiar s)
       (cond
	((string=? s ".") %dot)
	((string=? s "+") '+)
	((string=? s "-") '-)
	((string=? s "...") '...)
	((string->number s))
	((error "Malformed number" s)) ))
     (define (char-ci-in? ch str)
       (define (loop i)
	 (cond
	  ((< i 0) #f)
	  ((char-ci=? ch (string-ref str i)) #t)
	  (#t (loop (- i 1))) ))
       (loop (- (string-length str) 1)) )
     (define %closing (make-string 1 #\) ))
     (define %dot (make-string 1 #\. ))
     (define (%eof-error) (error "Unexpected EOF"))
     (define (%legal any)
       (cond
	((eof-object? any) (%eof-error))
	(#t (%legal-or-end any)) ))
     (define (%legal-or-end any)
       (cond
        ((eq? any %closing) (error "Unbalanced closing parenthesis"))
        ((eq? any %dot) (error "Misplaced dot"))
        (#t any) ))
     (define (%legal-qc ch)
       (cond
	((eof-object? ch) (%eof-error))
	((memq ch '(#\" #\\)) ch)
	(#t (error "Invalid escaped character in string" ch) ch) ))
     (lambda (port) (%legal-or-end (%read port))) )))

(define (%t any) "char tracing hook" any )

(display "Hello World")
(newline)

(define (foo . xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
  "This is a string constant that may serve as a documentation string."
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx )

(define (status-is s)
  (or (and (integer? s) (exact? s) (<= 0 s 255) s)
      (error "Status not a small integer" s) ))

(define (main args)
  (define %%reader (if (member "native" args) read %reader))
  (write (%%reader (current-input-port)))
  (newline)
  (if (not (eof-object? (peek-char))) (main args))
  (status-is 0) )
